<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="comboBox1.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAATjwqfnt1b6u8yNR/vMjUf7zI1H+8yNR/vMjUf7zI1H+8yNR/dm5nsU48KnEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABOPSuMi4mI/7zI1P+8yNT/vMjU/7zI1P+8yNT/vMjU/7zI1P+Gg4D/UD4sfwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE49K4yLiYj/vMjU/7zI1P+8yNT/vMjU/7zI1P+8yNT/vMjU/4aD
        gP9QPix/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AD//wAB//+AA///4Af////////////////8=
</value>
  </data>
</root>